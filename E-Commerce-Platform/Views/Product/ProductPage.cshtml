@using E_Commerce_Platform.ViewModels
@model ProductReviewViewModel
@{
    ViewData["Title"] = "ProductPage";
    Layout = "~/Views/Shared/_websiteLayout.cshtml";
    int fullStars = 0;
    bool hasHalfStar = false;
    int emptyStars= 0 ;
}

<link rel="stylesheet" href="~/css/shop.css" />
<link rel="stylesheet" href="~/css/about.css" />
<link rel="stylesheet" href="~/css/contactus.css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
<script src="~/js/product.js" defer></script>
<script src="~/lib/jquery/dist/jquery.js"></script>
<link rel="stylesheet" href="~/css/product.css">

<body>
    <div class="addedcheck hidecheck">
        <i class="text-white uil uil-check-circle" style="font-size: 25px;"></i>
        <span id="msggg" class="text-white block fs-100 bold-500 fs-poppins">"@(Model.Product.Name)" has been added to your view cart</span>
        <a class="no-style" asp-controller="cart" asp-action="CartPage"><button class="check-btn text-white block fs-100 bold-500 fs-poppins">View Cart</button></a>
    </div>
    <div class="main-container">
        <div class="product">
            <div class="product-container">
                <div class="product-img" data-aos="fade-up">
                    <img src="@Model.Product.ImageUrl" alt="">
                </div>
                <div class="product-text">
                    <div class="titles">
                        <div class="title-2 big-wireless block lineheight fs-400 bold-700 fs-poppins">@Model.Product.Name</div>
                        <div class="rating">
                            @{
                                fullStars = (int)Math.Floor(Model.avgRating);
                                hasHalfStar = (Model.avgRating - fullStars) >= 0.5;
                                emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);
                            }
                            @for (int i = 0; i < fullStars; i++)
                            {
                                <i class="fa fa-star" style="color: hsl(var(--clr-red));"></i>
                            }

                            @if (hasHalfStar)
                            {
                                <i class="fa-solid fa-star-half-stroke" style="color: hsl(var(--clr-red));"></i>
                            }

                            @for (int i = 0; i < emptyStars; i++)
                            {
                                <i class="fa-regular fa-star" style="color: hsl(var(--clr-red));"></i>
                            }

                            <span style="color: gray;" class="fs-100 bold-500 fs-poppins">
                                (@Model.Reviews.Count Customer reviewed)
                            </span>
                        </div>
                        <div class="title-2 big-wireless block lineheight fs-400 bold-700 fs-poppins">$@Model.Product.Price.ToString("N0")</div>
                        <div style="color: gray;" class="title-3 fs-100 bold-500 fs-poppins">@Model.Product.Description</div>
                    </div>
                    @if(Model.quantity == 0){
                        <div class="product-btns">
                            <button class="large-btn bg-red text-white fs-poppins fs-50" data-aos="fade-up" disabled>
                                Sold Out
                            </button>
                        </div>
                    }
                    else if (!User.Identity.IsAuthenticated)
                    {
                        <div class="product-btns">
                            <input class="text-black fs-poppins fs-200" type="number" value="1" data-aos="fade-up">
                            <a class="no-style" asp-action="login" asp-controller="account">
                                <button class="normal-btn bg-red text-white fs-poppins fs-50" data-aos="fade-up">
                                    Add To Cart
                                </button>
                            </a>
                        </div>
                    }
                    else{
                        <div class="product-btns">
                            <input class="text-black fs-poppins fs-200" type="number" value="1" data-aos="fade-up">
                            <button type="button" class="large-btn bg-red text-white fs-poppins fs-50" onclick="initAddToCartBtn(@Model.Product.Id, @Model.Product.Stock, '@Model.Product.Name')" data-aos="fade-up">
                                Add To Cart
                            </button>
                        </div>
                    }
                    <div style="display:flex; gap:10px; flex-direction:column;">
                        <span style="color: gray;" class="fs-100 bold-500 fs-poppins">
                            (Stock: @Model.Product.Stock)
                        </span>
                        <span class="text-black fs-100 bold-500 fs-poppins">Category: <span class="text-black fs-100 bold-500 fs-poppins" style="color: hsl(var(--clr-red));">@Model.Product.Category.Name</span></span>
                    </div>

                </div>
            </div>
            <div class="info-choose">
                <hr id="main-liner" style="border: 2px solid hsl(var(--clr-gray-light)); width: 100%;" data-aos="fade-up">
                <div class="choose-container" data-aos="fade-up">
                    <div class="choose-desc">
                        <hr class="choice-choosen-bar" style="border:2px solid hsl(var(--clr-red));">
                        <span class="choice-choosen fs-100 bold-700 fs-poppins">Description</span>
                    </div>
                    <div class="choose-review ">
                        <hr class="choice-notchoosen-bar" style="border:2px solid hsl(var(--clr-red));">
                        <span class="choice-notchoosen fs-100 bold-700 fs-poppins">Reviews(@Model.Reviews.Count)</span>
                    </div>
                </div>
                <div></div>
            </div>
            <div class="rev-desc-container" data-aos="fade-up">
                <div class="description show">
                    <div class="title-2 big-wireless block lineheight fs-400 bold-700 fs-poppins">Description</div>
                    <div style="color: gray;" class="title-3 fs-100 bold-500 fs-poppins">@Model.Product.Description</div>
                </div>
                <div class="reviews hide">
                    <div class="title-2 big-wireless block lineheight fs-200 bold-700 fs-poppins">@Model.Reviews.Count @((Model.Reviews.Count == 1) ? "Review" : "Reviews") for Beats</div>
                    @if (Model.Reviews.Count == 0)
                    {
                        <div class="title-2 big-wireless block lineheight fs-200 bold-700 fs-poppins">No Reviews</div>

                    }
                    else{
                        @foreach (var rev in Model.Reviews)
                        {
                            <div class="review-card">
                                <div class="user-info">
                                    <img id="img" src="@rev.User.ImageUrl" alt="">
                                    <div class="review-info">
                                        <div class="review-text">
                                            <span id="name" class="text-black fs-100 bold-500 fs-poppins">@rev.User.FullName <span id="date" style="color: gray;" class="fs-100 bold-500 fs-poppins">- @rev.ReviewDate </span></span>
                                            <span id="comment" style="color: gray;" class="fs-100 bold-500 fs-poppins">@rev.ReviewText </span>
                                        </div>
                                            <div class="likes">
                                                <button style="color: gray;" class="fs-100 bold-500 fs-poppins" data-review-id="@rev.Id" data-user-id="@rev.UserId"><i class="@(Model.LikedReviewsIds.Contains(rev.Id) ? "liked" : "notliked") fa-solid fa-thumbs-up"></i></button>
                                                <span style="color: gray;" class="likes-num fs-100 bold-500 fs-poppins">@rev.Likes</span>
                                            </div>
                    
                                    </div>
                                </div>
                                @{
                                    fullStars = (int)Math.Floor(rev.Rating);
                                    hasHalfStar = (rev.Rating - fullStars) >= 0.5;
                                    emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);
                                }

                                <div class="rating">
                                    @for (int i = 0; i < fullStars; i++)
                                    {
                                        <i class="fa fa-star" style="color: hsl(var(--clr-red));"></i>
                                    }

                                    @if (hasHalfStar)
                                    {
                                        <i class="fa-solid fa-star-half-stroke" style="color: hsl(var(--clr-red));"></i>
                                    }

                                    @for (int i = 0; i < emptyStars; i++)
                                    {
                                        <i class="fa-regular fa-star" style="color: hsl(var(--clr-red));"></i>
                                    }
                                </div>
                            </div>
                        }

                    }
                        @if(User.Identity.IsAuthenticated){
                            var newmodel = new Review{  UserId = User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value,
                                                        ReviewText = "",
                                                        ProductId = Model.Product.Id };
                            <partial name="_ReviewForm" model="newmodel" />
                        }
                        else
                        {
                            <p class="text-black fs-100 bold-500 fs-poppins">You need to be signed in to leave a review.</p>
                        }
                    </div>
                </div>
            </div>
            <div class="products" data-aos="fade-up">
                <div class="prod-titles">
                    <span class="big-wireless block lineheight fs-400 bold-700 fs-poppins">Related Products</span>
                </div>
                <div class="product-grid">

                    @foreach(var product in Model.RelatedProducts){
                        <div class="product-card">
                            <div class="prodimg" data-aos="fade-up">
                            <img src="@product.ImageUrl" alt="">
                            </div>
                        <span style="font-size:23px;" class="text-black bigtext fs-poppins bold-700 fs-100">
                            @product.Name
                            <div style="color:gray;" id="desc-text" class="title-3  fs-50 bold-500 fs-poppins">@product.Description</div>
                        </span>
                        <span id="prodprice" style="font-size:22px" class="prodprice text-black big-wireless block lineheight bold-700 fs-poppins">$@product.Price.ToString("N0")</span>

                        <a class="no-style" asp-controller="product" asp-action="ProductPage" asp-route-productId="@product.Id">

                            <button class="normal-btn bg-red text-white fs-poppins fs-50 " data-product-id="@product.Id">
                                Details
                            </button>
                        </a>

                        </div>

                    }
                </div>
            </div>
        </div>
    </div>
</body> 
<script>    
     document.querySelectorAll(".add-to-cart-btn").forEach(button => {
        button.addEventListener("click", function () {
            const productId = this.getAttribute("data-product-id");

            fetch("/Cart/AddToCart?productId=" + productId, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "X-Requested-With": "XMLHttpRequest"
                }
            })
                .then(response => response.json())
                .then(data => {
                })
                .catch(error => console.error("Error:", error));
           });
       });
</script>