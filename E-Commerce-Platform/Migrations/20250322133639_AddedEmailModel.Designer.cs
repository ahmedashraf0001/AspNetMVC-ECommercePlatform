// <auto-generated />
using System;
using E_Commerce_Platform.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace E_Commerce_Platform.Migrations
{
    [DbContext(typeof(AppContextDB))]
    [Migration("20250322133639_AddedEmailModel")]
    partial class AddedEmailModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("E_Commerce_Platform.EF.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("E_Commerce_Platform.EF.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("carts");
                });

            modelBuilder.Entity("E_Commerce_Platform.EF.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Watches"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Laptops"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Headphones"
                        },
                        new
                        {
                            Id = 4,
                            Name = "VR"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Gaming"
                        });
                });

            modelBuilder.Entity("E_Commerce_Platform.EF.Models.Email", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReceivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("emails");
                });

            modelBuilder.Entity("E_Commerce_Platform.EF.Models.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("likes");
                });

            modelBuilder.Entity("E_Commerce_Platform.EF.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("E_Commerce_Platform.EF.Models.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("orderDetails");
                });

            modelBuilder.Entity("E_Commerce_Platform.EF.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 3,
                            Description = "High-quality wireless earphones featuring active noise cancellation, deep bass, and crystal-clear audio. Perfect for music lovers and professionals who need a distraction-free experience.",
                            ImageUrl = "/images/h.png",
                            IsDeleted = false,
                            Name = "Wireless Earphones",
                            Price = 99.99m,
                            Stock = 0
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 5,
                            Description = "Next-generation gaming console with ultra-fast load times, stunning 4K graphics, and a vast library of exclusive titles. Includes a wireless controller and support for multiplayer gaming.",
                            ImageUrl = "/images/gam.png",
                            IsDeleted = false,
                            Name = "Gaming Console",
                            Price = 499.99m,
                            Stock = 0
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            Description = "Premium over-ear headphones designed for audiophiles. Features a comfortable, ergonomic design, studio-quality sound, and a long-lasting battery for all-day listening.",
                            ImageUrl = "/images/p9.jpg",
                            IsDeleted = false,
                            Name = "Over-Ear Headphones",
                            Price = 149.99m,
                            Stock = 0
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            Description = "Experience virtual reality like never before with this high-resolution VR headset. Features built-in sensors for motion tracking, adjustable lenses, and compatibility with the latest VR games and applications.",
                            ImageUrl = "/images/p8.png",
                            IsDeleted = false,
                            Name = "VR Headset",
                            Price = 299.99m,
                            Stock = 0
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            Description = "Enjoy wireless freedom with these high-fidelity Bluetooth headphones. Designed for comfort and durability, they provide rich sound, deep bass, and a long battery life of up to 30 hours.",
                            ImageUrl = "/images/p-7.jpg",
                            IsDeleted = false,
                            Name = "Wireless Headphones",
                            Price = 129.99m,
                            Stock = 0
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            Description = "A powerful laptop equipped with the latest Intel processor, dedicated graphics card, and a high-refresh-rate display, making it ideal for gaming, content creation, and professional work.",
                            ImageUrl = "/images/p-5.jpg",
                            IsDeleted = false,
                            Name = "High-Performance Laptop",
                            Price = 1499.99m,
                            Stock = 0
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            Description = "Advanced noise-canceling headphones designed to block out background noise and provide an immersive listening experience. Features high-fidelity sound and an ultra-comfortable design for long listening sessions.",
                            ImageUrl = "/images/product-img.jpg",
                            IsDeleted = false,
                            Name = "Noise-Canceling Headphones",
                            Price = 179.99m,
                            Stock = 0
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            Description = "A complete VR gaming kit that includes a high-resolution headset, motion-tracking controllers, and a collection of immersive VR games. Perfect for gamers looking to step into the world of virtual reality.",
                            ImageUrl = "/images/p-4.jpg",
                            IsDeleted = false,
                            Name = "VR Gaming Kit",
                            Price = 399.99m,
                            Stock = 0
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 1,
                            Description = "A stylish smartwatch with a sleek design, advanced fitness tracking, heart rate monitoring, and seamless smartphone integration. Stay connected while tracking your health and daily activities.",
                            ImageUrl = "/images/p-3.jpg",
                            IsDeleted = false,
                            Name = "Smartwatch",
                            Price = 249.99m,
                            Stock = 0
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            Description = "A high-end gaming laptop featuring an NVIDIA RTX graphics card, a high-refresh-rate display, and a powerful cooling system. Built for gamers who demand top-tier performance.",
                            ImageUrl = "/images/p-2.jpg",
                            IsDeleted = false,
                            Name = "Gaming Laptop",
                            Price = 1799.99m,
                            Stock = 0
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 3,
                            Description = "Affordable wireless headphones that offer clear sound quality, deep bass, and a comfortable fit. Perfect for casual listening and long commutes, with a battery life of up to 20 hours.",
                            ImageUrl = "/images/p-1.png",
                            IsDeleted = false,
                            Name = "Budget Wireless Headphones",
                            Price = 79.99m,
                            Stock = 0
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 2,
                            Description = "A sleek and lightweight ultra-thin laptop designed for professionals on the go. Features a high-resolution display, long battery life, and a premium aluminum chassis for durability.",
                            ImageUrl = "/images/p10.png",
                            IsDeleted = false,
                            Name = "Ultra-Thin Laptop",
                            Price = 1199.99m,
                            Stock = 0
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 1,
                            Description = "An advanced smartwatch packed with fitness tracking features, built-in GPS, sleep monitoring, and water resistance. Ideal for athletes and health-conscious users who need a reliable wearable.",
                            ImageUrl = "/images/p12.png",
                            IsDeleted = false,
                            Name = "Smartwatch Pro",
                            Price = 299.99m,
                            Stock = 0
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 1,
                            Description = "A high-end smartwatch with an AMOLED display, premium build quality, and advanced health tracking features. Offers seamless integration with both Android and iOS devices.",
                            ImageUrl = "/images/w.png",
                            IsDeleted = false,
                            Name = "Premium Smartwatch",
                            Price = 349.99m,
                            Stock = 0
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 2,
                            Description = "A business-class laptop designed for productivity. Features a high-performance processor, ample storage, and enhanced security features like fingerprint authentication and facial recognition.",
                            ImageUrl = "/images/Laptop.png",
                            IsDeleted = false,
                            Name = "Professional Laptop",
                            Price = 1599.99m,
                            Stock = 0
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 5,
                            Description = "An AI-powered smart speaker with built-in voice control, superior sound quality, and smart home integration. Control your music, check the weather, and manage your devices with voice commands.",
                            ImageUrl = "/images/mus.png",
                            IsDeleted = false,
                            Name = "Smart Speaker",
                            Price = 129.99m,
                            Stock = 0
                        });
                });

            modelBuilder.Entity("E_Commerce_Platform.EF.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("reviews");
                });

            modelBuilder.Entity("E_Commerce_Platform.EF.Models.Transactions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("paymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("transactionStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("transactions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("E_Commerce_Platform.EF.Models.Cart", b =>
                {
                    b.HasOne("E_Commerce_Platform.EF.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce_Platform.EF.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_Commerce_Platform.EF.Models.Like", b =>
                {
                    b.HasOne("E_Commerce_Platform.EF.Models.ApplicationUser", null)
                        .WithMany("Likes")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("E_Commerce_Platform.EF.Models.Review", "Review")
                        .WithMany("LikesInfo")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce_Platform.EF.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Review");

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_Commerce_Platform.EF.Models.Order", b =>
                {
                    b.HasOne("E_Commerce_Platform.EF.Models.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_Commerce_Platform.EF.Models.OrderDetail", b =>
                {
                    b.HasOne("E_Commerce_Platform.EF.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce_Platform.EF.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("E_Commerce_Platform.EF.Models.Product", b =>
                {
                    b.HasOne("E_Commerce_Platform.EF.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("E_Commerce_Platform.EF.Models.Review", b =>
                {
                    b.HasOne("E_Commerce_Platform.EF.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce_Platform.EF.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_Commerce_Platform.EF.Models.Transactions", b =>
                {
                    b.HasOne("E_Commerce_Platform.EF.Models.Order", "Order")
                        .WithOne("Transaction")
                        .HasForeignKey("E_Commerce_Platform.EF.Models.Transactions", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce_Platform.EF.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("E_Commerce_Platform.EF.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("E_Commerce_Platform.EF.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce_Platform.EF.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("E_Commerce_Platform.EF.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("E_Commerce_Platform.EF.Models.ApplicationUser", b =>
                {
                    b.Navigation("Likes");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("E_Commerce_Platform.EF.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("E_Commerce_Platform.EF.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("E_Commerce_Platform.EF.Models.Product", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("E_Commerce_Platform.EF.Models.Review", b =>
                {
                    b.Navigation("LikesInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
